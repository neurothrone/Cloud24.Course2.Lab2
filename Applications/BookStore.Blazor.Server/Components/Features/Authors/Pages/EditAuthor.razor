@page "/authors/edit"
@rendermode InteractiveServer

@using BookStore.Persistence.EFCore.Data
@using BookStore.Persistence.EFCore.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit Author</PageTitle>
<h3>Edit Author</h3>

@if (_isBusy || _author is null)
{
    <LoadingIndicator/>
}
else if (_author is not null)
{
    <EditForm Model="_author"
              OnValidSubmit="SaveAuthor">
        
        <DataAnnotationsValidator/>

        <div class="mb-3">
            <div class="input-group mb-1">
                <span style="width: 115px;"
                      class="input-group-text">
                    First Name
                </span>
                <InputText class="form-control"
                           placeholder="Jane"
                           @bind-Value="_author.FirstName"/>
            </div>
            <ValidationMessage For="() => _author.FirstName"/>
        </div>

        <div class="mb-3">
            <div class="input-group mb-1">
                <span style="width: 115px;"
                      class="input-group-text">
                    Last Name
                </span>
                <InputText class="form-control"
                           placeholder="Doe"
                           @bind-Value="_author.LastName"/>
            </div>
            <ValidationMessage For="() => _author.LastName"/>
        </div>

        <div class="mb-3">
            <div class="input-group mb-1">
                <span style="width: 115px;"
                      class="input-group-text">
                    Birth Date
                </span>
                <InputDate class="form-control"
                           min="0001-01-01"
                           max="@(DateTime.Today.ToString("yyyy-MM-dd"))"
                           @bind-Value="_author.BirthDate"/>
            </div>
            <ValidationMessage For="() => _author.BirthDate"/>
        </div>

        <button type="submit" class="btn btn-primary">Update Author</button>
    </EditForm>
}

@code {

    [SupplyParameterFromQuery(Name = "id")]
    private int AuthorId { get; set; }

    [Inject]
    private NavigationManager Navigation { get; set; } = null!;

    [Inject]
    private IDbContextFactory<BookStoreDbContext> ContextFactory { get; set; } = null!;

    private Author? _author;
    private bool _isBusy;

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;

        try
        {
            await using var context = await ContextFactory.CreateDbContextAsync();
            _author = await context.Authors
                .AsNoTracking()
                .FirstOrDefaultAsync(a => a.Id == AuthorId);
        }
        finally
        {
            _isBusy = false;
        }

        if (_author is null)
            Navigation.NavigateTo("/404");
    }

    private async Task SaveAuthor()
    {
        if (_author is null)
            return;

        _isBusy = true;

        try
        {
            await using var context = await ContextFactory.CreateDbContextAsync();
            context.Update(_author);
            await context.SaveChangesAsync();

            Navigation.NavigateTo("/authors");
        }
        finally
        {
            _isBusy = false;
        }
    }

}